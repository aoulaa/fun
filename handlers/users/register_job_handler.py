from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardRemove
from aiogram.utils.markdown import hbold

from keyboards.inline.butons import admin_send
from keyboards.default.menu_buttons import serve
from loader import dp, db


@dp.message_handler(text='–ó–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É üìã')
async def service(message: types.message):
    await message.answer('—á—Ç–æ –≤—ã –∏—â–∏—Ç–µ?',
                         reply_markup=serve)


@dp.message_handler(text='üìù –∏—â—É —Ä–∞–±–æ—Ç—É')
async def job_want(message: types.message, state: FSMContext):
    await message.answer('–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –æ–±—ä—è–≤–ª–µ–Ω–∏–µ. –Ω–∞–ø—Ä–∏–º–µ—Ä –∏—â—É —Ä–∞–±–æ—Ç—É –≤ –æ—Ñ–∏—Å–µ: ',
                         reply_markup=ReplyKeyboardRemove())
    await state.set_state("title")


@dp.message_handler(state='title')
async def add_state(message: types.message, state: FSMContext):
    title = message.text
    db.update_title(title=title, id=message.from_user.id)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è \n'
                         '–≤ —Ñ–æ—Ä–º–∞—Ç–µ: –û–ª–µ–≥, 25')

    await state.set_state("name")


@dp.message_handler(state='name')
async def add_name(message: types.message, state: FSMContext):
    name = message.text
    db.update_name(name=name, id=message.from_user.id)
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –æ —Å–µ–±–µ:\n'
                         '(–ª–∏—á–Ω—ã–µ –∏ –¥–µ–ª–æ–≤—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞).')
    await state.set_state('self.info')


@dp.message_handler(state='self.info')
async def add_about_self(message: types.message, state: FSMContext):
    self_info = message.text
    db.update_user_self_info(self_info=self_info, id=message.from_user.id)
    await message.answer('–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: ')

    await state.set_state('education_state')


@dp.message_handler(state='education_state')
async def add_education(message: types.message, state: FSMContext):
    education = message.text
    db.update_education(education=education, id=message.from_user.id)
    await message.answer('–í–∞—à(–∞)–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è, —É–º–µ–Ω–∏—è, –Ω–∞–≤—ã–∫–∏: ')

    await state.set_state('job')


@dp.message_handler(state='job')
async def add_job(message: types.message, state: FSMContext):
    jobs = message.text
    db.update_profession(profession=jobs, id=message.from_user.id)
    await message.answer('–ó–Ω–∞–Ω–∏–µ —è–∑—ã–∫–æ–≤: ')

    await state.set_state('language_state')


@dp.message_handler(state='language_state')
async def add_language(message: types.message, state: FSMContext):
    language = message.text
    db.update_language(language=language, id=message.from_user.id)
    await message.answer('–ñ–µ–ª–∞—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞: ')

    await state.set_state('desirable_job_state')


@dp.message_handler(state='desirable_job_state')
async def add_desirable_job(message: types.message, state: FSMContext):
    desirable_job = message.text
    db.update_desirable_job(desirable_job=desirable_job, id=message.from_user.id)
    await message.answer('–ö–æ–Ω—Ç–∞–∫—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ +998901234567: ')

    await state.set_state('contact')


@dp.message_handler(state='contact')
async def number(message: types.message, state: FSMContext):
    contact_1 = message.text
    db.update_number(number=contact_1, id=message.from_user.id)
    user1 = db.select_user(id=message.from_user.id)

    msg_text_1 = "\n".join(
            [f'%{user1[0]}%',
             hbold(user1[2]) + '\n\n' +
             hbold('–ò–º—è, –õ–µ—Ç:  ') + f'{user1[3]}',
             hbold('–û —Å–µ–±–µ:  ') + f'{user1[4]}',
             hbold('–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:  ') + f'{user1[5]}',
             hbold('–ü—Ä–æ—Ñ–µ—Å—Å–∏—è:  ') + f'{user1[6]}',
             hbold('–Ø–∑—ã–∫–∏:  ') + f'{user1[7]}',
             hbold('–ñ–µ–ª–∞—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞:  ') + f'{user1[8]}',
             'üìû ' + f'{int(user1[9])}']
        )

    await message.answer(msg_text_1, reply_markup=admin_send)

    await state.finish()

